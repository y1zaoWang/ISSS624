{
  "hash": "e14e48ea46876aa92b5bc6f324285d9b",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 2\"\nauthor: \"WYZ\"\n---\n\n\n# **Applied Spatial Interaction Models: A case study of Singapore public bus commuter flows**\n\n## **1 Background**\n\nThe scenario highlights the challenges in urban mobility, specifically understanding commuting patterns and the impact of public transportation changes. Traditional methods like commuter surveys are outdated and inefficient. The focus shifts to leveraging digital infrastructure data, such as GPS and SMART card usage, for more dynamic and insightful analysis.The exercise is motivated by two factors: the underutilization of available open data for policy making and the need for practical research in geospatial data science and analysis (GDSA). The task involves using GDSA to integrate diverse data sources, building spatial interaction models to understand public bus transit patterns. This approach aims to provide more effective tools for urban planning and decision-making.\n\n## **2 The Data**\n\n### **Open Government Data**\n\nFor the purpose of this assignment, data from several open government sources will be used:\n\n-   *Passenger Volume by Origin Destination Bus Stops*, *Bus Stop Location*, *Train Station* and *Train Station Exit Point*, just to name a few of them, from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html).\n\n-   *Master Plan 2019 Subzone Boundary*, *HDB Property Information*, *School Directory and Information* and other relevant data from [Data.gov.sg](https://beta.data.gov.sg/).\n\n-   *hexagon*, a [hexagon](https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-statistics-toolbox/h-whyhexagons.htm) layer of 250m (this distance is the perpendicular distance between the centre of the hexagon and its edges.) should be used to replace the relative coarse and irregular Master Plan 2019 Planning Sub-zone GIS data set of URA.\n\n## **3 Getting Started**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, DT, stplanr, sp,\n               performance,reshape2,httr,\n               ggpubr, tidyverse, corrplot)\n```\n:::\n\n\n## **4 Data Preparation**\n\n### **4.1 Importing the OD data**\n\nFirstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus <- read_csv(\"Take-home Exercise 2/data/aspatial/origin_destination_bus_202310.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 5694297 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): YEAR_MONTH, DAY_TYPE, PT_TYPE, ORIGIN_PT_CODE, DESTINATION_PT_CODE\ndbl (2): TIME_PER_HOUR, TOTAL_TRIPS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          <chr> \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <dbl> 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <chr> \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE <chr> \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         <dbl> 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n```\n:::\n:::\n\n\nLet's do a quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) \n```\n:::\n\n\nFor this take home exercise, we will extract commuting flows on weekday and between 6 and 9 o'clock.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus6_9 <- odbus %>%\n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  filter(TIME_PER_HOUR >= 6 &\n           TIME_PER_HOUR <= 9) %>%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'ORIGIN_PT_CODE'. You can override using\nthe `.groups` argument.\n```\n:::\n:::\n\n\nSave the output in rds format for future used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(odbus6_9, \"Take-home Exercise 2/data/rds/odbus6_9.rds\")\nodbus6_9 <- read_rds(\"Take-home Exercise 2/data/rds/odbus6_9.rds\")\n```\n:::\n\n\n### **4.2 Importing Geospatial data into R**\n\nFor the purpose of this exercise, three geospatial data will be used first. They are:\n\n-   BusStop: This data provides the location of bus stop as at last quarter of 2023.\n\n-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\n-   Hexagon: analytical hexagon data of 375m (this distance is the perpendicular distance between the centre of the hexagon and its edges) to represent the [traffic analysis zone (TAZ)](https://tmg.utoronto.ca/files/Reports/Traffic-Zone-Guidance_March-2021_Final.pdf).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"Take-home Exercise 2/data/geospatial\",\n                   layer = \"BusStop\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `D:\\y1zaoWang\\ISSS624\\Take-home Exercise 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"Take-home Exercise 2/data/geospatial\",\n                   layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `D:\\y1zaoWang\\ISSS624\\Take-home Exercise 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- write_rds(mpsz, \"Take-home Exercise 2/data/rds/mpsz.rds\")\n```\n:::\n\n\n### 4.3 Creating Hexagon grid\n\n\n::: {.cell}\n\n```{.r .cell-code}\narea_honeycomb_grid = st_make_grid(busstop,cellsize = 750, what = \"polygons\", square = FALSE)\n\nhoneycomb_grid_sf = st_sf(area_honeycomb_grid) %>%\n\nmutate(grid_id = 1:length(lengths(area_honeycomb_grid)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(honeycomb_grid_sf, \"Take-home Exercise 2/data/geospatial/hexagon.shp\",append=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUpdating layer `hexagon' to data source `Take-home Exercise 2/data/geospatial/hexagon.shp' using driver `ESRI Shapefile'\nUpdating existing layer hexagon\nWriting 2541 features with 1 fields and geometry type Polygon.\n```\n:::\n\n```{.r .cell-code}\nhexagon <- st_read(dsn = \"Take-home Exercise 2/data/geospatial\",\n                   layer = \"hexagon\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `hexagon' from data source \n  `D:\\y1zaoWang\\ISSS624\\Take-home Exercise 2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5082 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3220.122 ymin: 26049.09 xmax: 48970.12 ymax: 53545.39\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n:::\n\n\n## **5 Geospatial data wrangling**\n\n### **5.1 Combining Busstop and Hexagon**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhoneycomb_grid <- st_intersection(busstop, hexagon) %>%\n  select(BUS_STOP_N, grid_id) %>%\n  st_drop_geometry()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(honeycomb_grid, \"Take-home Exercise 2/data/rds/hexagon_busstop.rds\")\n```\n:::\n\n\n### **5.2 Combine Busstop and mpsz**\n\nNext, we are going to combine the datset mpsz and hexagon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_mpsz <- st_intersection(busstop, mpsz) %>%\n  select(BUS_STOP_N, SUBZONE_C) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n:::\n\n\n### **5.3 Combining Hexagon and busstop_mpsz**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhexagon_bsmpsz <- st_join(busstop_mpsz , hexagon,\n            by = c(\"geometry\" = \"geometry\")) \n```\n:::\n\n\n### **5.4 Combine odbus6_9 with od_data**\n\nCombine the Hexagon and busstop_mpsz with the odbus6_9 data to give me the unique identifier of the origin:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm6_9 <- left_join(odbus6_9 , hexagon_bsmpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %>%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(odbus6_9, hexagon_bsmpsz, by = c(ORIGIN_PT_CODE = \"BUS_STOP_N\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1345 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n:::\n\n\nNow, we check the duplicate. If duplicated records exist, the code chunk below will be used to retain the unique records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- bm6_9 %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\nbm6_9 <- unique(bm6_9)\n```\n:::\n\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\n\nNext, we will update od_data data frame with Combine Hexagon and Busstop_Mpsz with destination:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbm6_9_1 <- left_join(bm6_9 , hexagon_bsmpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(bm6_9, hexagon_bsmpsz, by = c(DESTIN_BS = \"BUS_STOP_N\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1343 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n:::\n\n\nBefore continue, it is a good practice for us to check for duplicating records once again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- bm6_9_1 %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbm6_9_1 <- unique(bm6_9_1)\nbm6_9_1 <- bm6_9_1 %>%\n  drop_na() %>%\n  group_by(geometry.x, geometry.y) %>%\n  summarise(MORNING_PEAK = sum(TRIPS))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'geometry.x'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\nSave the output on rds for the rest of the project.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bm6_9_1, \"Take-home Exercise 2/data/rds/bm6_9_1.rds\")\nbm6_9_1 <- read_rds(\"Take-home Exercise 2/data/rds/bm6_9_1.rds\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}