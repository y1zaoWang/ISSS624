---
title: "In-class Exercise 4"
author: "WYZ"
---

## Overview

## Getting Started

```{r}
pacman::p_load(tidyverse, sf, httr, tmap)
```

## Geocoding using SLA API

```{r}
#url<-"https://www.onemap.gov.sg/api/common/elastic/search"

#csv<-read_csv("In-class_Ex4/aspatial/Generalinformationofschools.csv")
#postcodes<-csv$`postal_code`

#found<-data.frame()
#not_found<-data.frame()

#for(postcode in postcodes){
  #query<-list('searchVal'=postcode,'returnGeom'='Y'#,'getAddrDetails'='Y','pageNum'='1')
 # res<- GET(url,query=query)
 # 
 # if((content(res)$found)!=0){
  #  found<-rbind(found,data.frame(content(res))[4:13])
 # } else{
 #   not_found = data.frame(postcode)
#  }
#}
```

```{r}
#merged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)
#write.csv(merged, file = "In-class_Ex4/aspatial/schools.csv")
#write.csv(not_found, file = "In-class_Ex4/aspatial/not_found.csv")
```

## Converting an aspatial data into a simple feature tibble data.frame

### Importing and tidying *schools* data

```{r}
schools <- read_csv("In-class_Ex4/aspatial/schools.csv") %>%
  rename(latitude = "results.LATITUDE",
         longitude = "results.LONGITUDE") %>%
  select(postal_code, school_name, latitude, longitude)
```

```{r}
schools_sf <- st_as_sf(schools,
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs=3414)
```

```{r}
write_rds(schools_sf, "In-class_Ex4/rds/schools.rds")
```

### **Plotting a point simple feature layer**

To ensure that *schools* sf tibble data.frame has been projected and converted correctly, you can plot the schools point data for visual inspection.

First, let us import *MPSZ-2019* shapefile into R environment and save it as an sf tibble data.frame called *mpsz*.

```{r}
mpsz <- st_read(dsn = "In-class_Ex4/geospatial/",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

Using the steps you learned in previous exercises, create a point symbol map showing the location of schools with OSM as the background map.

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(mpsz) +
  tm_polygons() +
tm_shape(schools_sf) +
  tm_dots()
```

### **Performing point-in-polygon count process**

Next, we will count the number of schools located inside the planning subzones.

```{r}
mpsz$`SCHOOL_COUNT`<- lengths(
  st_intersects(
    mpsz, schools_sf))
```

It is always a good practice to examine the summary statistics of the derived variable.

```{r}
summary(mpsz$SCHOOL_COUNT)
```

## **Data Integration and Final Touch-up**

```{r}
business_sf <- st_read(dsn = "In-class_Ex4/geospatial",
                      layer = "Business")
```

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(mpsz) +
  tm_polygons() +
tm_shape(business_sf) +
  tm_dots()
```

```{r}
mpsz$`BUSINESS_COUNT`<- lengths(
  st_intersects(
    mpsz, business_sf))
```

```{r}
summary(mpsz$BUSINESS_COUNT)
```

```{r}
flow_data <- read_rds("In-class_Ex4/rds0/flow_data_tidy.rds")
flow_data
```

```{r}
mpsz_tidy <- mpsz %>%
  st_drop_geometry() %>%
  select(SUBZONE_C, SCHOOL_COUNT, BUSINESS_COUNT)
```

Now, we will append SCHOOL_COUNT and BUSINESS_COUNT fields from mpsz_tidy data.frame into flow_data sf tibble data.frame by using the code chunk below.

```{r}
flow_data <- flow_data %>%
  left_join(mpsz_tidy,
            by = c("DESTIN_SZ" = "SUBZONE_C")) %>%
  rename(TRIPS = MORNING_PEAK,
         DIST = dist)
```

```{r}
summary(flow_data)
```

The print report above reveals that variables *ORIGIN_AGE7_12*, *ORIGIN_AGE13_24*, *ORIGIN_AGE25_64*, *DESTIN_AGE7_12*, *DESTIN_AGE13_24*, *DESTIN_AGE25_64* consist of 0 values.

In view of this, code chunk below will be used to replace zero values to 0.99.

```{r}
flow_data$BUSINESS_COUNT <- ifelse(
  flow_data$BUSINESS_COUNT == 0,
  0.99, flow_data$BUSINESS_COUNT)
```

```{r}
summary(flow_data)
```

Notice that all the 0 values have been replaced by 0.99.

Before we move on to calibrate the Spatial Interaction Models, let us save flow_data sf tibble data.frame into an rds file. Call the file *flow_data_tidy*.

```{r}
write_rds(flow_data,
          "In-class_Ex4/rds/flow_data_tidy.rds")
```
