---
title: "In-class Exercise 4"
author: "WYZ"
---

## Overview

## Getting Started

```{r}
pacman::p_load(tidyverse, sf, httr, tmap)
```

## Geocoding using SLA API

```{r}
#url <- "http://www.onemap.gov.sg/api/common/elastic/search"

#csv <- read_csv("In-class_Ex4/aspatial/Generalinformationofschools.csv")
#postcodes <- csv$'postal_code'

#found <- data.frame()
#not_found <- data.frame()

#for(postcode in postcodes){
#  query <- list('searchVal' = postcode, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')
#  res <- GET(url, query = query)
#  if((content(res)$found) != 0){
#    found <- rbind(found, data.frame(content(res))[4:13])
#  } else{
#    not_found = data.frame(postcode)
#  }
#}
```

```{r}
#merged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)
#write.csv(merged, file = "In-class_Ex4/aspatial/schools.csv")
#write.csv(not_found, file = "In-class_Ex4/aspatial/not_found.csv")
```

## Converting an aspatial data into a simple feature tibble data.frame

### Importing and tidying *schools* data

```{r}
schools <- read_csv("In-class_Ex4/aspatial/schools.csv") %>%
  rename(latitude = "results.LATITUDE",
         longitude = "results.LONGITUDE") %>%
  select(postal_code, school_name, latitude, longitude)
```

```{r}
schools_sf <- st_as_sf(schools,
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs=3414)
```
